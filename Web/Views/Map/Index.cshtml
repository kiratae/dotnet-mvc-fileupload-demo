@{
    ViewData["Title"] = "Map";
}
@inject IConfiguration config

<h1>Map</h1>

@section Head{
<style>
    #map {
        height: 500px;
        width: 100%;
    }
</style>
}

<div class="row">
    <div class="col-8">
        <div id="map" class="border rounded"></div>
    </div>
    <div class="col-4">
        <button type="button" id="loc-btn" class="btn btn-primary mb-3">Pan to Current Location</button>
        <div class="mb-3">
            <label for="pac-input" class="form-label">Autocomplete search</label>

            <div class="row mb-2">
                <div class="col-4 text-left">
                    <div class="form-check ">
                        <input class="form-check-input" type="radio" name="type" id="changetype-all" checked="checked">
                        <label class="form-check-label" for="changetype-all">All</label>
                    </div>
                </div>
                <div class="col-4 text-left">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="type" id="changetype-establishment">
                        <label class="form-check-label" for="changetype-establishment">establishment</label>
                    </div>
                </div>
                <div class="col-4 text-left">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="type" id="changetype-address">
                        <label class="form-check-label" for="changetype-address">address</label>
                    </div>
                </div>
                <div class="col-4 text-left">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="type" id="changetype-geocode">
                        <label class="form-check-label" for="changetype-geocode">geocode</label>
                    </div>
                </div>
                <div class="col-4 text-left">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="type" id="changetype-cities">
                        <label class="form-check-label" for="changetype-cities">(cities)</label>
                    </div>
                </div>
                <div class="col-4 text-left">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="type" id="changetype-regions">
                        <label class="form-check-label" for="changetype-regions">(regions)</label>
                    </div>
                </div>
            </div>

            <hr />

            <div class="row mb-2">
                <div class="col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="use-location-bias" checked>
                        <label class="form-check-label" for="use-location-bias">Bias to map viewport</label>
                    </div>
                </div>
                <div class="col-12">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="use-strict-bounds">
                        <label class="form-check-label" for="use-strict-bounds">Strict bounds</label>
                    </div>
                </div>
            </div>

            <input type="text" class="form-control" id="pac-input" placeholder="Enter a location">
        </div>
    </div>
</div>

<div id="infowindow-content">
    <span id="place-name" class="title"></span><br />
    <span id="place-address"></span>
</div>

@section Scripts {
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=@(Html.Raw(config["GoogleApiKey"]))&libraries=places&callback=initMap" async defer></script>
<script type="text/javascript">
    let map, infoWindow, curMarker;
    function initMap() {
        map = new google.maps.Map($('#map').get(0), {
            center: { lat: 13.736717, lng: 100.523186 },
            zoom: 8,
            //mapTypeControl: false,
        });

        infoWindow = new google.maps.InfoWindow();

        // # current location button
        //map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
        $('#loc-btn').on("click", function () {
            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                function (position) {
                    const pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                    };
                    curMarker = new google.maps.Marker({
                        position: pos,
                        map: map,
                    });

                    //infoWindow.setPosition(pos);
                    //infoWindow.setContent("Location found.");
                    //infoWindow.open(map);
                    map.setCenter(pos);
                    map.setZoom(13);
                },
                function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        });

        const marker = new google.maps.Marker({
            map,
            anchorPoint: new google.maps.Point(0, -29),
        });

        const input = $("#pac-input").get(0);
        const autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo("bounds", map);

        const infowindowContent = $("#infowindow-content").get(0);
        infoWindow.setContent(infowindowContent);

        autocomplete.addListener("place_changed", function() {
            infoWindow.close();
            curMarker.setVisible(false);
            marker.setVisible(false);

            const place = autocomplete.getPlace();

            if (!place.geometry || !place.geometry.location) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }

            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            $(infowindowContent).children("#place-name").text(place.name);
            $(infowindowContent).children("#place-address").text(place.formatted_address);
            infoWindow.open(map, marker);
        });

        function setupClickListener(id, types) {
            $(id).on("click", function() {
                autocomplete.setTypes(types);
                input.value = "";
            });
        }

        setupClickListener("changetype-all", []);
        setupClickListener("changetype-address", ["address"]);
        setupClickListener("changetype-establishment", ["establishment"]);
        setupClickListener("changetype-geocode", ["geocode"]);
        setupClickListener("changetype-cities", ["(cities)"]);
        setupClickListener("changetype-regions", ["(regions)"]);

        $("#use-location-bias").on("change", function() {
            if ($(this).is(":checked")) {
                autocomplete.bindTo("bounds", map);
            } else {
                // User wants to turn off location bias, so three things need to happen:
                // 1. Unbind from map
                // 2. Reset the bounds to whole world
                // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
                autocomplete.unbind("bounds");
                autocomplete.setBounds({ east: 180, west: -180, north: 90, south: -90 });
                $("#use-strict-bounds").prop('checked', $(this).is(":checked"));
            }
            input.value = "";
        });

        $("#use-strict-bounds").on("change", function() {
            autocomplete.setOptions({
                strictBounds: $(this).is(":checked"),
            });

            if ($(this).is(":checked")) {
                $("#use-location-bias").prop('checked', $(this).is(":checked"));
                autocomplete.bindTo("bounds", map);
            }
            input.value = "";
        });
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(
            browserHasGeolocation
                ? "Error: The Geolocation service failed."
                : "Error: Your browser doesn't support geolocation."
            );
        infoWindow.open(map);
    }

    window.initMap = initMap;
</script>
}
